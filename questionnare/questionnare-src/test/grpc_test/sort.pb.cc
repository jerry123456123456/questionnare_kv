// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sort.proto

#include "sort.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mynamespace {
constexpr SortRequest::SortRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : numbers_()
  , _numbers_cached_byte_size_(0){}
struct SortRequestDefaultTypeInternal {
  constexpr SortRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SortRequestDefaultTypeInternal() {}
  union {
    SortRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SortRequestDefaultTypeInternal _SortRequest_default_instance_;
constexpr SortResponse::SortResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sorted_numbers_()
  , _sorted_numbers_cached_byte_size_(0){}
struct SortResponseDefaultTypeInternal {
  constexpr SortResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SortResponseDefaultTypeInternal() {}
  union {
    SortResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SortResponseDefaultTypeInternal _SortResponse_default_instance_;
}  // namespace mynamespace
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sort_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sort_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sort_2eproto = nullptr;

const uint32_t TableStruct_sort_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mynamespace::SortRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mynamespace::SortRequest, numbers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mynamespace::SortResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mynamespace::SortResponse, sorted_numbers_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::mynamespace::SortRequest)},
  { 7, -1, -1, sizeof(::mynamespace::SortResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mynamespace::_SortRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mynamespace::_SortResponse_default_instance_),
};

const char descriptor_table_protodef_sort_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nsort.proto\022\013mynamespace\"\036\n\013SortRequest"
  "\022\017\n\007numbers\030\001 \003(\005\"&\n\014SortResponse\022\026\n\016sor"
  "ted_numbers\030\001 \003(\0052Q\n\013SortService\022B\n\013Sort"
  "Numbers\022\030.mynamespace.SortRequest\032\031.myna"
  "mespace.SortResponseb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sort_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sort_2eproto = {
  false, false, 188, descriptor_table_protodef_sort_2eproto, "sort.proto", 
  &descriptor_table_sort_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_sort_2eproto::offsets,
  file_level_metadata_sort_2eproto, file_level_enum_descriptors_sort_2eproto, file_level_service_descriptors_sort_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_sort_2eproto_getter() {
  return &descriptor_table_sort_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sort_2eproto(&descriptor_table_sort_2eproto);
namespace mynamespace {

// ===================================================================

class SortRequest::_Internal {
 public:
};

SortRequest::SortRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  numbers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mynamespace.SortRequest)
}
SortRequest::SortRequest(const SortRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      numbers_(from.numbers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mynamespace.SortRequest)
}

inline void SortRequest::SharedCtor() {
}

SortRequest::~SortRequest() {
  // @@protoc_insertion_point(destructor:mynamespace.SortRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SortRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SortRequest::ArenaDtor(void* object) {
  SortRequest* _this = reinterpret_cast< SortRequest* >(object);
  (void)_this;
}
void SortRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SortRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SortRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mynamespace.SortRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  numbers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SortRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 numbers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_numbers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_numbers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SortRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mynamespace.SortRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 numbers = 1;
  {
    int byte_size = _numbers_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_numbers(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mynamespace.SortRequest)
  return target;
}

size_t SortRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mynamespace.SortRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 numbers = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->numbers_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _numbers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SortRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SortRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SortRequest::GetClassData() const { return &_class_data_; }

void SortRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SortRequest *>(to)->MergeFrom(
      static_cast<const SortRequest &>(from));
}


void SortRequest::MergeFrom(const SortRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mynamespace.SortRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  numbers_.MergeFrom(from.numbers_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SortRequest::CopyFrom(const SortRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mynamespace.SortRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortRequest::IsInitialized() const {
  return true;
}

void SortRequest::InternalSwap(SortRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  numbers_.InternalSwap(&other->numbers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SortRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sort_2eproto_getter, &descriptor_table_sort_2eproto_once,
      file_level_metadata_sort_2eproto[0]);
}

// ===================================================================

class SortResponse::_Internal {
 public:
};

SortResponse::SortResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sorted_numbers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mynamespace.SortResponse)
}
SortResponse::SortResponse(const SortResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sorted_numbers_(from.sorted_numbers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mynamespace.SortResponse)
}

inline void SortResponse::SharedCtor() {
}

SortResponse::~SortResponse() {
  // @@protoc_insertion_point(destructor:mynamespace.SortResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SortResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SortResponse::ArenaDtor(void* object) {
  SortResponse* _this = reinterpret_cast< SortResponse* >(object);
  (void)_this;
}
void SortResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SortResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SortResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mynamespace.SortResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sorted_numbers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SortResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 sorted_numbers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_sorted_numbers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_sorted_numbers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SortResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mynamespace.SortResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 sorted_numbers = 1;
  {
    int byte_size = _sorted_numbers_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_sorted_numbers(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mynamespace.SortResponse)
  return target;
}

size_t SortResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mynamespace.SortResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 sorted_numbers = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->sorted_numbers_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sorted_numbers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SortResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SortResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SortResponse::GetClassData() const { return &_class_data_; }

void SortResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SortResponse *>(to)->MergeFrom(
      static_cast<const SortResponse &>(from));
}


void SortResponse::MergeFrom(const SortResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mynamespace.SortResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sorted_numbers_.MergeFrom(from.sorted_numbers_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SortResponse::CopyFrom(const SortResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mynamespace.SortResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortResponse::IsInitialized() const {
  return true;
}

void SortResponse::InternalSwap(SortResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sorted_numbers_.InternalSwap(&other->sorted_numbers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SortResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sort_2eproto_getter, &descriptor_table_sort_2eproto_once,
      file_level_metadata_sort_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mynamespace
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mynamespace::SortRequest* Arena::CreateMaybeMessage< ::mynamespace::SortRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mynamespace::SortRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mynamespace::SortResponse* Arena::CreateMaybeMessage< ::mynamespace::SortResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mynamespace::SortResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
